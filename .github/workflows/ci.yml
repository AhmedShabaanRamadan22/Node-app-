name: CI/CD Pipeline

on:
  push:
    branches:
    - main
  pull_request:
    types: [ opened, synchronize, reopened ]

jobs:
  sonar-scan-and-gate:
    name: SonarQube Scan & Quality Gate
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Run SonarQube Scan
      uses: SonarSource/sonarqube-scan-action@v6
      with:
        projectBaseDir: ./
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}

    - name: Extract SonarQube Project URL
      run: |
        echo "📂 محتويات report-task.txt:"
        cat .scannerwork/report-task.txt || echo "⚠️ report-task.txt not found"
        DASHBOARD_URL=$(grep '^dashboardUrl=' .scannerwork/report-task.txt | cut -d'=' -f2)
        echo "DASHBOARD_URL=$DASHBOARD_URL" >> $GITHUB_ENV

    - name: Check SonarQube Quality Gate
      id: quality_gate
      uses: SonarSource/sonarqube-quality-gate-action@v1
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      continue-on-error: true

    - name: Set Quality Gate outcome
      id: set_outcome
      run: echo "OUTCOME=${{ steps.quality_gate.outputs.outcome }}" >> $GITHUB_ENV

    - name: Fail if Quality Gate failed
      run: |
        if [ "$OUTCOME" != "success" ]; then
          echo "🚨 Quality Gate **FAILED**! Please check SonarQube 👉 $DASHBOARD_URL" >> "$GITHUB_STEP_SUMMARY"
          echo "🚨 Quality Gate FAILED! Please check SonarQube: $DASHBOARD_URL"
          exit 1
        else
          echo "✅ Quality Gate **PASSED** 🎉 [View Report here]($DASHBOARD_URL)" >> "$GITHUB_STEP_SUMMARY"
          echo "✅ Quality Gate PASSED. View details at: $DASHBOARD_URL"
        fi

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: sonar-scan-and-gate

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Install dependencies
      run: npm install

    - name: Run tests
      run: npm test || echo "No tests available"

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/node-app:latest
